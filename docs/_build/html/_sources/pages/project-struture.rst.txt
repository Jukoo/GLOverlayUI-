*****************
Project  Overview
*****************

.. toctree:: 
   :maxdepth: 2  
   :caption: Contents:

  
Project Structure
------------------

.. code-block:: text

   GLOverlayUI/
   ├── assets/              # Assets resources
   │   └── logo/            # Logo Emplacement folder  
   │        └── <images>    # Images 
   ├── src/                 # C++ source files
   │   ├── renderer.C       # OpenGL rendering logic (source) (UI-agnostic)
   │   ├── mainframe.C      # wxWidget  wrapper (source)
   │   ├── canvasdriver.C   # wxGLCanvas wrapper (source)
   ├── include/             # C++ header files
   │   ├── renderer.H       # OpenGL rendering logic (header) (UI-agnostic)
   │   ├── canvasdriver.H   # wxGLCanvas wrapper (header)
   │   ├── mainframe.H      # wxWidget wrapper (header)
   │   ├── GLOverlayUI_config.in.H     # Generated  Configuration (header)
   ├── CMakeLists.txt       # Build configuration
   ├── config/              # Folder  configuration
   │   └── GLOverlayUI_config.in   # Basic Config  of GLOverlayUI application 
   ├── docs/                # Documentation folder
   │   ├── conf.py          # Sphinx configuration
   │   ├── index.rst        # This file (Sphinx entry point)
   │   ├── doc.cmake        # Doxygen + Sphinx integration
   │   ├── autodocs.cmake   # cmake file to automate the documentation build  
   │   ├── make.bat         # Generated by sphinx-quickstart
   │   ├── Doxyfile         # Doxyfile Generated by Doxygen 
   │   ├── Makefile         # Generated by sphinx-quickstart
   ├── GLOverlayUI_app.C    # Main application window and UI logic
   ├── requirements.txt     # Python dependencies for documentation
   └── README.md            # Project overview



Architecture Overview
---------------------

The application is organized into **three decoupled components**:

.. list-table::
   :widths: 20 50 20
   :header-rows: 1

   * - Component
     - Description
     - Depends on wxWidgets
   * - ``renderer``
     - Core OpenGL rendering logic
     - ❌
   * - ``canvasdriver``
     - ``canvasdriver`` wrapper, handles UI integration
     - ✅
   * - ``MainFrame``
     - Main UI (panel, slider, checkbox)
     - ✅

This clean separation enables easy testing and reusability of the rendering logic in other contexts.
