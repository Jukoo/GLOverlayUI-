<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="canvasdriver_8C" kind="file" language="C++">
    <compoundname>canvasdriver.C</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">iostream</includes>
    <includes refid="renderer_8H" local="yes">renderer.H</includes>
    <includes refid="canvasdriver_8H" local="yes">canvasdriver.H</includes>
    <incdepgraph>
      <node id="8">
        <label>canvasdriver.H</label>
        <link refid="canvasdriver_8H"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>renderer.H</label>
        <link refid="renderer_8H"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/umar/Desktop/workstation/CGui/WxWidget/src/canvasdriver.C</label>
        <link refid="canvasdriver_8C"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>GL/gl.h</label>
      </node>
      <node id="6">
        <label>GL/glu.h</label>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>cstdio</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="10">
        <label>wx/glcanvas.h</label>
      </node>
      <node id="9">
        <label>wx/wx.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Kind of middleware between mainframe layout and rendering interaction. </para>
    </briefdescription>
    <detaileddescription>
<para>Copyright (C) 2025 Umar Ba <ulink url="mailto:jUmarB@protonmail.com">jUmarB@protonmail.com</ulink> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <ulink url="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</ulink>. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="renderer_8H" kindref="compound">renderer.H</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="canvasdriver_8H" kindref="compound">canvasdriver.H</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="classCanvasDriver_1a00d082182dd62773e59b9b9ba59849c6" refkind="member"><highlight class="normal"><ref refid="classCanvasDriver_1a00d082182dd62773e59b9b9ba59849c6" kindref="member">CanvasDriver::CanvasDriver</ref>(wxWindow<sp/><sp/>*<sp/>mainframe_parent)<sp/>:<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>wxGLCanvas(mainframe_parent)<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>_ctx<sp/>=<sp/><sp/><ref refid="canvasdriver_8H_1ad377aae910f57b36cc16611c4c5ca033" kindref="member">mkptr</ref>(unique<sp/>,<sp/><sp/>wxGLContext,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>;<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/>glEnable(GL_DEPTH_TEST);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/>glShadeModel(GL_SMOOTH);<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/>Bind(wxEVT_PAINT<sp/>,<sp/>&amp;CanvasDriver::on_painting<sp/>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>;<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>Bind(wxEVT_SIZE<sp/>,<sp/>&amp;CanvasDriver::on_resizing<sp/>,<sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>;<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>Bind(wxEVT_MOTION,<sp/>&amp;CanvasDriver::on_mouse<sp/>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/>Bind(wxEVT_LEFT_DOWN,<sp/>&amp;CanvasDriver::on_mouse_grab<sp/>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>;<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>Bind(wxEVT_LEFT_UP<sp/><sp/>,<sp/>&amp;CanvasDriver::on_mouse_release,</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>;<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal">};<sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classCanvasDriver_1a54f5f3b395745284ed70b1c1dbc22ae4" refkind="member"><highlight class="normal"><ref refid="classCanvasDriver_1a54f5f3b395745284ed70b1c1dbc22ae4" kindref="member">CanvasDriver::~CanvasDriver</ref>()<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/><sp/>__cpp_11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>_ctx<sp/>;<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>_ctx<sp/>=<sp/>nullptr<sp/>;<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classCanvasDriver_1af9ca95586488aaca0f8c73a0ab7c5002" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanvasDriver_1af9ca95586488aaca0f8c73a0ab7c5002" kindref="member">CanvasDriver::renderer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>forms)<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>SetCurrent(*_ctx)<sp/>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>_renderer.<ref refid="classRenderer_1afc711f32933d61863420f8443cb4a632" kindref="member">setforms</ref>(forms)<sp/>;<sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>_renderer.<ref refid="classRenderer_1a54c2f582951c35c16f6bba2c4e5be9f8" kindref="member">display</ref>()<sp/><sp/>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>SwapBuffers()<sp/>;<sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classCanvasDriver_1a9fa09da05f675d9f10cd945a9965dc50" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCanvasDriver_1a9fa09da05f675d9f10cd945a9965dc50" kindref="member">CanvasDriver::get_renderer_state</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_show<sp/>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classCanvasDriver_1ab3396951fd4de41f87d5a79e93d6e1c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanvasDriver_1ab3396951fd4de41f87d5a79e93d6e1c6" kindref="member">CanvasDriver::set_renderer_state</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/>state)<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/>_show<sp/><sp/>=<sp/>state<sp/>;<sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classCanvasDriver_1a4807bc38743f9f93b276a82d8afd0672" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanvasDriver_1a4807bc38743f9f93b276a82d8afd0672" kindref="member">CanvasDriver::toggle_renderer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>current_forms<sp/>=<sp/><sp/>_renderer.<ref refid="classRenderer_1ab45b83dcdf09d55ca17ff6fde5db14f7" kindref="member">getforms</ref>()<sp/>;<sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>_show^=1;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!_show)<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>_renderer.<ref refid="classRenderer_1afc711f32933d61863420f8443cb4a632" kindref="member">setforms</ref>(current_forms<sp/>&amp;~current_forms);<sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>_renderer.<ref refid="classRenderer_1afc711f32933d61863420f8443cb4a632" kindref="member">setforms</ref>(current_forms);<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>Refresh(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>;<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classCanvasDriver_1a47f9f434ea2d275d2779825176f23585" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanvasDriver_1a47f9f434ea2d275d2779825176f23585" kindref="member">CanvasDriver::apply_rotation</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>_angle)<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>_renderer.<ref refid="classRenderer_1a693ac5762e3d9b3317038ab111d1ef9f" kindref="member">rotate_forms</ref>(_angle)<sp/>;<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>Refresh(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>;<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classCanvasDriver_1aa99ed92d57e3cdc8e13596f9f42d5041" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanvasDriver_1aa99ed92d57e3cdc8e13596f9f42d5041" kindref="member">CanvasDriver::apply_scaling</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>scale<sp/>)<sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>_renderer.<ref refid="classRenderer_1ac7b99d2aa500e76f6d4ca0b76c4bc725" kindref="member">scale_forms</ref>(scale)<sp/>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>Refresh(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>;<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CanvasDriver::on_painting(wxPaintEvent&amp;<sp/>evt)<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>forms<sp/>=<sp/>_renderer.<ref refid="classRenderer_1ab45b83dcdf09d55ca17ff6fde5db14f7" kindref="member">getforms</ref>()<sp/>;<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="classCanvasDriver_1af9ca95586488aaca0f8c73a0ab7c5002" kindref="member">renderer</ref>(forms)<sp/>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CanvasDriver::on_resizing(wxSizeEvent<sp/><sp/>&amp;<sp/>evt)<sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>wxSize<sp/>size<sp/>=<sp/><sp/>GetClientSize()<sp/>;<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>glViewport(0,<sp/>0,<sp/>size.x,<sp/>size.y);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>glMatrixMode(GL_PROJECTION);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>glLoadIdentity();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>glOrtho(size.x/2,<sp/>size.x/2,<sp/>size.y/2,<sp/>size.y/2,<sp/>-1,<sp/>1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>glMatrixMode(GL_MODELVIEW);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>glLoadIdentity();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>evt.Skip()<sp/>;<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>Refresh(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>;<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CanvasDriver::on_mouse(wxMouseEvent&amp;<sp/>evt)<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_mouse_grab_state)<sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>wxPoint<sp/>position=<sp/><sp/>evt.GetPosition()<sp/>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/><sp/>(position.x<sp/>*<sp/>position.y)<sp/><sp/>/<sp/><sp/>360.f<sp/>;<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanvasDriver_1a47f9f434ea2d275d2779825176f23585" kindref="member">apply_rotation</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(angle))<sp/>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CanvasDriver::on_mouse_grab(wxMouseEvent&amp;<sp/>evt<sp/>)<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>_mouse_grab_state^=1<sp/>;<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/>(_mouse_grab_state)<sp/>?<sp/><sp/>CaptureMouse()<sp/>:<sp/>ReleaseMouse()<sp/>;<sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CanvasDriver::on_mouse_release(wxMouseEvent<sp/>&amp;<sp/>evt)<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>on_mouse_grab(evt)<sp/>;<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/umar/Desktop/workstation/CGui/WxWidget/src/canvasdriver.C"/>
  </compounddef>
</doxygen>
